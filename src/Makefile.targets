all: $(EXECUTABLE) python_embed/wrapper_functions.so

test: all $(TEST_EXECUTABLE)

debug: CXXFLAGS += -g
debug: CXXFLAGS += -O0
debug: CPPFLAGS += -DDEBUG
debug: all


#
# The other makefile
#

tmx-parser/libtmxparser.a: tmx-parser/Makefile.linux
	@echo "${bold}[ Compiling tmx-parser library ]${normal}"
	@if [ "$(SANITIZE)" == "1" ]; then                          \
		$(MAKE) -C tmx-parser -f Makefile.linux;                \
	else                                                        \
		$(MAKE) CXXFLAGS=-fPIC -C tmx-parser -f Makefile.linux; \
	fi                                                          \


#
# Folders
#

dependencies:
	@-${MKDIR} dependencies

dependencies/challenges: | dependencies
	@-${MKDIR} dependencies/challenges

dependencies/gui: | dependencies
	@-${MKDIR} dependencies/gui

dependencies/input_management: | dependencies
	@-${MKDIR} dependencies/input_management

dependencies/python_embed: | dependencies
	@-${MKDIR} dependencies/python_embed

dependencies/test: | dependencies
	@-${MKDIR} dependencies/test



#
# Executables
# DO NOT RE-ORDER - tmx parser must come before tinyxml in ldlibs

$(EXECUTABLE): $(BASE_OBJS)              \
               $(CHALLENGE_OBJS)         \
               $(EXECUTABLE_OBJ)         \
               $(GUI_OBJS)               \
               $(INPUT_OBJS)             \
               $(PYTHON_OBJS)            \
               tmx-parser/libtmxparser.a \
               | dependencies            \

	@echo "${bold}${green}[ Compiling $(EXECUTABLE) ]${normal}"

	@$(COMPILER) -o $@ $(EXECUTABLE_OBJ) \
		$(BASE_OBJS) $(CHALLENGE_OBJS) $(GUI_OBJS) $(INPUT_OBJS) $(PYTHON_OBJS) \
		$(BOOST_LDFLAGS)     $(BOOST_LDLIBS)     $(BOOST_CXXFLAGS)     \
		$(GLOG_LDFLAGS)      $(GLOG_LDLIBS)      $(GLOG_CXXFLAGS)      \
		$(GRAPHICS_LDFLAGS)  $(GRAPHICS_LDLIBS)  $(GRAPHICS_CXXFLAGS)  \
		$(PYTHON_LDFLAGS)    $(PYTHON_LDLIBS)    $(PYTHON_CXXFLAGS)    \
		$(SDL_LDFLAGS)       $(SDL_LDLIBS)       $(SDL_CXXFLAGS)       \
		$(TMXPARSER_LDFLAGS) $(TMXPARSER_LDLIBS) $(TMXPARSER_CXXFLAGS) \
		$(TINYXML_LDFLAGS)   $(TINYXML_LDLIBS)   $(TINYXML_CXXFLAGS)   \
		$(ZLIB_LDFLAGS)      $(ZLIB_LDLIBS)      $(ZLIB_CXXFLAGS)      \
		$(LDLIBS)            $(LDFLAGS)          $(CXXFLAGS)           \

$(TEST_EXECUTABLE): $(EXECUTABLE) $(TEST_EXECUTABLE_OBJ) $(TEST_OBJS)
	@echo "${bold}${green}[ Compiling $(TEST_EXECUTABLE) ]${normal}"

	@$(COMPILER) -o $@ $(TEST_EXECUTABLE_OBJ) \
		$(BASE_OBJS) $(CHALLENGE_OBJS) $(GUI_OBJS) $(INPUT_OBJS) $(PYTHON_OBJS) $(TEST_OBJS) \
		$(BOOST_LDFLAGS)     $(BOOST_LDLIBS)     $(BOOST_CXXFLAGS)     \
		$(GLOG_LDFLAGS)      $(GLOG_LDLIBS)      $(GLOG_CXXFLAGS)      \
		$(GRAPHICS_LDFLAGS)  $(GRAPHICS_LDLIBS)  $(GRAPHICS_CXXFLAGS)  \
		$(PYTHON_LDFLAGS)    $(PYTHON_LDLIBS)    $(PYTHON_CXXFLAGS)    \
		$(SDL_LDFLAGS)       $(SDL_LDLIBS)       $(SDL_CXXFLAGS)       \
		$(TMXPARSER_LDFLAGS) $(TMXPARSER_LDLIBS) $(TMXPARSER_CXXFLAGS) \
		$(TINYXML_LDFLAGS)   $(TINYXML_LDLIBS)   $(TINYXML_CXXFLAGS)   \
		$(ZLIB_LDFLAGS)      $(ZLIB_LDLIBS)      $(ZLIB_CXXFLAGS)      \
		$(LDLIBS)            $(LDFLAGS)          $(CXXFLAGS)           \


#
# Object files
#

$(TEST_EXECUTABLE_OBJ) $(TEST_OBJS): | dependencies/test
$(TEST_EXECUTABLE_OBJ) $(TEST_OBJS) $(EXECUTABLE_OBJ) $(BASE_OBJS): %.o : %.cpp | dependencies
	@echo "${bold}[ Compiling base object file ${green}$*.o${normal}${bold} from ${green}$*.cpp${normal}${bold} ]${normal}"

	@$(COMPILER) -c $*.cpp -o $*.o \
		$(GLOG_CPPFLAGS)      $(GLOG_CXXFLAGS)      \
		$(GRAPHICS_CPPFLAGS)  $(GRAPHICS_CXXFLAGS)  \
		$(PYTHON_CPPFLAGS)    $(PYTHON_CXXFLAGS)    \
		$(SDL_CPPFLAGS)       $(SDL_CXXFLAGS)       \
		$(TINYXML_CPPFLAGS)   $(TINYXML_CXXFLAGS)   \
		$(TMXPARSER_CPPFLAGS) $(TMXPARSER_CXXFLAGS) \
		$(ZLIB_CPPFLAGS)      $(ZLIB_CXXFLAGS)      \
		$(CPPFLAGS)           $(CXXFLAGS)           \

$(INPUT_OBJS): %.o : %.cpp | dependencies/input_management
	@echo "${bold}[ Compiling input object file ${green}$*.o${normal}${bold} from ${green}$*.cpp${normal}${bold} ]${normal}"

	@$(COMPILER) -c $*.cpp -o $*.o \
		$(GLOG_CPPFLAGS) $(GLOG_CXXFLAGS) \
		$(SDL_CPPFLAGS)  $(SDL_CXXFLAGS)  \
		$(CPPFLAGS)      $(CXXFLAGS)      \


$(GUI_OBJS): %.o : %.cpp | dependencies/gui
	@echo "${bold}[ Compiling gui object file ${green}$*.o${normal}${bold} from ${green}$*.cpp${normal}${bold} ]${normal}"

	@$(COMPILER) -c $*.cpp -o $*.o \
		$(GLOG_CPPFLAGS)   $(GLOG_CXXFLAGS)        \
		$(GRAPHICS_CPPFLAGS)  $(GRAPHICS_CXXFLAGS) \
		$(PYTHON_CPPFLAGS) $(PYTHON_CXXFLAGS)      \
		$(SDL_CPPFLAGS)    $(SDL_CXXFLAGS)         \
		$(CPPFLAGS)        $(CXXFLAGS)             \



$(CHALLENGE_OBJS): %.o : %.cpp | dependencies/challenges
	@echo "${bold}[ Compiling challenge object file ${green}$*.o${normal}${bold} from ${green}$*.cpp${normal}${bold} ]${normal}"

	@$(COMPILER) -c $*.cpp -o $*.o \
		$(GLOG_CPPFLAGS)     $(GLOG_CXXFLAGS)     \
		$(GRAPHICS_CPPFLAGS) $(GRAPHICS_CXXFLAGS) \
		$(PYTHON_CPPFLAGS)   $(PYTHON_CXXFLAGS)   \
		$(CPPFLAGS)          $(CXXFLAGS)          \

$(PYTHON_OBJS): %.o : %.cpp $(PYTHON_HEADER).$(PRECOMPILED_HEADER_EXTENSION) | dependencies/python_embed
	@echo "${bold}[ Compiling Python object file ${green}$*.o${normal}${bold} from ${green}$*.cpp${normal}${bold} ]${normal}"

	@$(COMPILER) -c $*.cpp -o $*.o \
		$(GLOG_CPPFLAGS)                           \
		$(GRAPHICS_CPPFLAGS)  $(GRAPHICS_CXXFLAGS) \
		$(PYTHON_CPPFLAGS) $(PYTHON_CXXFLAGS)      \
		$(PYTHON_INCLUDE_PCH)                      \
		$(CXXFLAGS) $(CPPFLAGS)                    \

$(PYTHON_SHARED_OBJS): %.so : %.cpp $(PYTHON_SHARED_OBJS_DEPENDS) | dependencies/python_embed
	@echo "${bold}[ Compiling Python shared object file ${green}$*.so${normal}${bold} from ${green}$*.cpp${normal}${bold} ]${normal}"

	@$(COMPILER) -shared -fPIC $*.cpp -o $*.so \
		$(PYTHON_LDLIBS) $(PYTHON_CPPFLAGS) \
		$(BOOST_LDLIBS) $(BOOST_CPPFLAGS)   \
		$(CXXFLAGS) $(CPPFLAGS)             \
		-MF dependencies/$*.sd              \


#
# Precompiled header
#

$(PYTHON_HEADER).unknown:
	@echo "${bold}[ $(COMPILER): ${GREEN}Don't know how to precompile Python header; ignoring.${normal}${bold} ]${normal}"
	@touch $(PYTHON_HEADER).unknown

$(PYTHON_HEADER).gch: $(PYTHON_HEADER)
	@echo "${bold}[ $(COMPILER): Precompiling Python header ${green}$<.gch${normal}${bold} from ${green}$<${normal}${bold} ]${normal}"

	@$(COMPILER) $< -o $<.gch \
		$(PYTHON_CPPFLAGS) $(PYTHON_CXXFLAGS) \
		$(CPPFLAGS)        $(CXXFLAGS)        \

# This largely assumes the setup is constant for clang.
# clang with precompiled headers may work, but is not guaranteed.
$(PYTHON_HEADER).pch: $(PYTHON_HEADER)
	@echo "${bold}[ $(COMPILER): Precompiling Python header ${green}$<.pch${normal}${bold} from ${green}$<${normal}${bold} ]${normal}"

	@# Apologies for the mess, but I can't think of a better way.
	@$(COMPILER) -x c++-header $< -o $<.pch \
		$$(echo                                       \
			"$(BOOST_CPPFLAGS)" "$(BOOST_CXXFLAGS)"   \
			"$(PYTHON_CPPFLAGS)" "$(PYTHON_CXXFLAGS)" \
			"$(CXXFLAGS)"                             \
		| sed                                         \
		 	-e 's/-mtune=[^ ]*//g'                    \
		 	-e 's/-generic//g'                        \
		 	-e 's/--param=[^ ]*//g'                   \
		 	-e 's/-M[^ ]*//g'                         \
		)                                             \


#
# Once finished...
#

debug:
	@echo "${bold}${green}Complied in debug${normal}"


#
# Cleaning
#

clean:
	@-$(RM) $(EXECUTABLE) $(TEST_EXECUTABLE)

	@-$(RM) \
		$(BASE_OBJS)           \
		$(CHALLENGE_OBJS)      \
		$(EXECUTABLE_OBJ)      \
		$(GUI_OBJS)            \
		$(INPUT_OBJS)          \
		$(PYTHON_OBJS)         \
		$(PYTHON_SHARED_OBJS)  \
		$(TEST_EXECUTABLE_OBJ) \
		$(TEST_OBJS)           \

	@-$(RM) $(HEADER_DEPENDS)

	@-for directory in dependencies/* dependencies; do \
	  if [ -d $${directory} ]; then ${RMDIR} $${directory}; fi; \
	done

	@echo "${bold}${green}Made clean${normal}"

veryclean: clean
	@-$(RM) $(PYTHON_HEADER).gch $(PYTHON_HEADER).pch
	@-$(MAKE) -C tmx-parser -f Makefile.linux clean
	@echo "${bold}${green}Made very clean${normal}"

-include ${HEADER_DEPENDS}


#
# It is what it is, OK?
#

.PHONY: all
.PHONY: clean
.PHONY: debug
.PHONY: test
.PHONY: veryclean
